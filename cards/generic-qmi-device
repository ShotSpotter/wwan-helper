#!/bin/sh
set -eu

# Copyright (C) 2016  Martin Krafft <madduck@madduck.net>
# Copyright (C) 2022  Robert B. Calhoun <rcalhoun@shotspotter.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

setup() {
  # Setup of the handler script. This is entirely optional and can be anything
  # you need to make the script work, including creating temporary files, and
  # setting up variables used by the main loop, such as $SERIAL_DEV and
  # $CHAT_TIMEOUT, in case you want to use the `modemchat` helper function.
  # You could also set these variables outside the function.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  # configured in /etc/network/interfaces
  # APN=shotspotter01.com.attz
  # PIN=""

  # SERIAL_DEV currently unused but available for AT commands
  # This is /dev/ttyUSB2 b115200 for the Telit LE910Cx (driver-dependent)
  SERIAL_DEV=/dev/ttyUSB2
  # cdc device used by qmicli/libqmi
  CDC_DEV=/dev/cdc-wdm0
  CHAT_TIMEOUT=5
  RUNDIR="/run/$(basename "$0")"
  FIELDS="handle CID"
  return $?
}

readvars() {
  HANDLE=$(cat "${RUNDIR}/handle") || (ERR="$?"; echo "could not read cached handle"; return "$ERR")
  CID=$(cat "${RUNDIR}/CID") || (ERR="$?"; echo "could not read cached CID" ; return "$ERR")
  return 0
}

init() {
  # Steps required to initialise the modem to the point where it's ready to
  # take commands. This might involve turning it on.
  #
  # The function must block until the modem is ready.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  # best documentaion is
  # https://docs.sixfab.com/page/setting-up-a-data-connection-over-qmi-interface-using-libqmi

  ip link set "$IFACE" down

  if ! (lsusb -t | grep -q qmi_wwan) ; then
    echo "qmi driver is not loaded"
    return 1
  fi

  verbose "checking power state"
  # not sure what to do with this, can't find qmi_dms_power_state_build_string_from_mask def
  # for now just dump it to the console
  msg=$(qmicli -p --device="${CDC_DEV}" --dms-get-power-state)
  # can't find definition of this enum
  # Power state: 'external-source'
	# Battery level: '0 %'
  verbose "$msg"


  verbose "get operating mode"
  RETVAL=1
  for i in $(seq 1 6); do
    if qmicli -p --device="${CDC_DEV}" --dms-get-operating-mode | grep -q 'online' ; then
      verbose "modem is online"
      RETVAL=0
      break
     else
      echo "${i}: setting operation mode online"
      sleep 5
      qmicli -p --device="${CDC_DEV}" --dms-set-operating-mode='online'
    fi
  done

  # check for raw ip mode and fix if necessary
  # LE910C4NA seems to be in raw-ip at boot

  MODE=$(qmicli -p --device="${CDC_DEV}" --get-expected-data-format)

  if [ "${MODE}" != "raw-ip" ] ; then
    echo 'Y' > /sys/class/net/wwan0/qmi/raw_ip
  fi

  return "$RETVAL"
}

unlock() {
  # Steps required to unlock the SIM. It will only be called if a SIM PIN is
  # specified in the configuration.
  #
  # The function must block until the SIM is accessible.
  #
  # Be careful to avoid repeatedly sending a PIN as that might yield the SIM
  # card to lock itself.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  verbose "unlock sim"
  if [ "$PIN" ] ; then
    qmicli -p --device="${CDC_DEV}" --dms-uim-verify-pin="PIN,${PIN}"
  fi
  return $?
}

register() {
  # Steps required to register the SIM with the network.
  #
  # The function must block until the SIM is registered.

  # With the Telit LE910C4, SIM registration is done with the "default" PDP context,
  # and whatever APN it defines, rather than the APN defined with the "connect" command.
  # If the default APN cannot be reached (because for example the SIM is bound to a private
  # APN) the connect call will fail. See
  # https://lists.freedesktop.org/archives/libqmi-devel/2020-November/003480.html

  # To fix:
  # 1) ensure a PDP context for the user APN exists
  # 2) make it the default if so configured

  #TODO: support 3gpp2
  profile=-1
  for i in $(seq 0 1) ; do
    apns=$(qmicli -p --device="${CDC_DEV}" --wds-get-profile-list=3gpp | grep 'APN:' | grep -Eo "'.*'" | tr -d "'")
    # apns="m2m.com.attz ims sos attm2mglobal"
    j=1
    for apn in $apns; do
      if (echo "$apn" | grep -i "${APN}" ) ; then
        verbose "${apn} matches ${APN}, profile=${j}"
        profile="$j"
        break 2
      fi
      j=$((j+1))
    done
    # didn't break, so no profile for this apn
    verbose "No profile found for APN ${APN}; creating new profile..."
    # create a profile then loop again to find the profile index
    if [ "$IF_WWAN_ALLOW_ROAMING" = "false" ] ; then
      qmicli -p --device="${CDC_DEV}" --wds-create-profile=3gpp,apn="${APN}",pdp-type=IPV4V6,auth=NONE,no-roaming=yes,disabled=no || return $?
    else
      qmicli -p --device="${CDC_DEV}" --wds-create-profile=3gpp,apn="${APN}",pdp-type=IPV4V6,auth=NONE,no-roaming=no,disabled=no || return $?
    fi
    verbose "done, retval $?"
  done

  default_profile=$(qmicli -p --device="${CDC_DEV}" --wds-get-default-profile-number=3gpp | grep 'Default profile number:' | grep -Eo "'.*'" | tr -d "'")
  if [ "$profile" -ne "$default_profile" ] ; then
    verbose "Setting $profile as the default profile"
    qmicli -p --device="${CDC_DEV}" --wds-set-default-profile-number="3gpp,${profile}" || return $?
  fi


  # not doing anything yet
  verbose "register step"
  # TODO: there can be multiple SIMs slots, should support selection
  msg=$(qmicli -p --device="${CDC_DEV}" --uim-get-card-status)
  if (echo "$msg" | grep 'Application state' | grep 'ready') ; then
    verbose "$msg"
    verbose "SIM is ready"
  else
    echo "SIM not ready."
  fi

  msg=$(qmicli -p --device="${CDC_DEV}" --nas-get-operator-name)
  verbose "$msg"


  RETVAL=1
  verbose "RSSI"
  for i in $(seq 1 12) ; do
    network=$(qmicli -p --device="${CDC_DEV}" --nas-get-signal-strength)
    if echo "$network" | grep -e 'umts' -e 'lte' ; then
      verbose "network up"
      RETVAL=0
      break
    else
      verbose "$network"
      verbose "waiting to acquire network..."
      sleep 5
    fi
  done
  return "$RETVAL"
}

connect() {
  # Steps required to connect the carrier. Please note that wwan-helper only
  # works with NDIS carrier setups (no PPP chat).
  #
  # The function must block until the carrier is connected.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.

  mkdir -p "${RUNDIR}"
  if [ -d "${RUNDIR}" ] ; then verbose "storing state in ${RUNDIR}" ; else verbose "rundir missing" ; fi

  RESULT=$(qmicli -p --device="${CDC_DEV}" --wds-start-network="ip-type=4,apn=${APN}" --client-no-release-cid)
  ERR=$?
  if [ "$ERR" -eq 0 ] ; then 
    for FIELD in $FIELDS ; do 
     VALUE=$(echo "${RESULT}" | grep -E -o "${FIELD}: ?'[0-9]+'" | grep -E -o "[0-9]+") && echo "${VALUE}" > "${RUNDIR}/${FIELD}" || return $?
    done
    verbose "modem attached to network"
  else
    verbose "modem failed to attach to network"
    return "$ERR"
  fi

  ip link set "${IFACE}" up || return $?

  # some people think you shouldn't use dhcp
  # https://lists.freedesktop.org/archives/libqmi-devel/2020-April/003263.html
  # but techship says its ok
  # https://techship.com/faq/how-to-step-by-step-set-up-a-data-connection-over-qmi-interface-using-qmicli-and-in-kernel-driver-qmi-wwan-in-linux/

  # alternative:
  # qmicli -p --device="${CDC_DEV}" --wds-get-current-settings
  # IP Family: IPv4
  # IPv4 address: 10.65.8.3
  # IPv4 subnet mask: 255.255.255.248
  # IPv4 gateway address: 10.65.8.4
  # MTU: 1430
  # Domains: none

  ipdata_path="${RUNDIR}/ipdata"
  qmicli -p --device="${CDC_DEV}" --wds-get-current-settings > "${ipdata_path}" || (echo "no current settings" ; return $? )
  ip_addr=$(grep 'IPv4 address:' "${ipdata_path}" | cut -d: -f2 | tr -d ' ' )
  ip_mask=$(grep 'IPv4 subnet mask:' "${ipdata_path}" | cut -d: -f2 | tr -d ' ' )
  ip_gateway=$(grep 'IPv4 gateway address:' "${ipdata_path}" | cut -d: -f2 | tr -d ' ' )
  ip_mtu=$(grep 'MTU:' "${ipdata_path}" | cut -d: -f2 | tr -d ' ' )

  # complicated and broken
  #ip address add "${ip_addr}/${ip_mask}" dev wwan0
  #ip link set dev wwan0 mtu "${ip_mtu}"
  #ip route add default via "${ip_gateway}"

  # wrong but easy and works
  udhcpc -q -f -n -i wwan0 || return $?
  

  # Insert user-defined dns servers if appropriate
  if [ "$IF_DNS_NAMESERVERS" ] ; then
    # often /etc/resolv.conf -> /tmp/resolv.conf on embedded
    RESOLV_PATH=$(realpath /etc/resolv.conf)
    TMP_PATH=$(mktemp)
    echo "# created by $0" > "$TMP_PATH"
    for NAMESERVER in $IF_DNS_NAMESERVERS; do
      echo "nameserver ${NAMESERVER}" >> "$TMP_PATH"
    done
    cp "$RESOLV_PATH" "$RUNDIR"
    mv "$TMP_PATH" "$RESOLV_PATH"
  fi
  return $?
}

reset() {
  # If any of the above steps are unsuccessful and the user configured
  # a non-zero number of retries, this function is called. It is required to
  # take all steps necessary to reset the modem to before the "register" step,
  # i.e. including re-initialisation and unlocking of the SIM if required (it
  # can just call those functionsâ€¦)
  #
  # The function must block until the card is ready to get registered with the
  # network.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.
  qmicli -p --device="${CDC_DEV}" --wds-reset
  :
}

disconnect() {
  # Steps required to disconnect the carrier.
  #
  # The script must block until the carrier is disconnected.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # proceed to shut down the card.
 
  # restore DNS
  TMP_PATH="${RUNDIR}/resolv.conf"
  if [ -e "${TMP_PATH}" ] ; then
    RESOLV_PATH=$(realpath /etc/resolv.conf)
    mv "$TMP_PATH" "$RESOLV_PATH"
  fi

  # bring down interface
  ip link set "${IFACE}" down || return $?

  # shut down modem
  # FIELDS="handle CID"
  readvars || return $?
  verbose "shutting down connection with handle=${HANDLE}, CID=${CID}"
  qmicli -p --device="${CDC_DEV}" --wds-stop-network="${HANDLE}" --client-cid="${CID}"
  rm "${RUNDIR}/handle"
  rm "${RUNDIR}/CID"
  return $?
}

shutdown() {
  # Steps required to shut-down the the modem. This usually means turning off
  # the send-receive unit and/or putting the card into a power-safe mode.
  #
  # The script must block until the card is shut-down.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # finish and pretend the world is all in order.
  verbose "shutdown"
  rmdir "${RUNDIR}"
  :
}

teardown() {
  # Optional steps to tear-down the handler script, e.g. removing temporary
  # files, etc.
  #
  # Note that this step is called after both connect() and disconnect().
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.
  verbose "teardown"
  :
}
