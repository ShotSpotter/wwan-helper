#!/bin/sh
set -eu

# Copyright (C) 2016  Martin Krafft <madduck@madduck.net>
# Copyright (C) 2022  Robert B. Calhoun <rcalhoun@shotspotter.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

setup() {
  # Setup of the handler script. This is entirely optional and can be anything
  # you need to make the script work, including creating temporary files, and
  # setting up variables used by the main loop, such as $SERIAL_DEV and
  # $CHAT_TIMEOUT, in case you want to use the `modemchat` helper function.
  # You could also set these variables outside the function.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  # configured in /etc/network/interfaces
  # APN=shotspotter01.com.attz
  # PIN=""


  SERIAL_DEV=/dev/cdc-wdm0
  RUNDIR="/run/$0"
  FIELDS="handle CID"

  mkdir -p "${RUNDIR}"
  return $?
}

readvars() {
  HANDLE=$(cat "${RUNDIR}/handle") || (echo "could not read cached handle"; return $?)
  CID=$(cat "${RUNDIR}/CID") || (echo "could not read cached CID" ; return $?)
  return 0
}

init() {
  # Steps required to initialise the modem to the point where it's ready to
  # take commands. This might involve turning it on.
  #
  # The function must block until the modem is ready.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  if ! (lsusb -t | grep -q qmi_wwan) ; then
    echo "qmi driver is not loaded"
    return 1
  fi

  ip link set "$IFACE" down
  return $?
}

unlock() {
  # Steps required to unlock the SIM. It will only be called if a SIM PIN is
  # specified in the configuration.
  #
  # The function must block until the SIM is accessible.
  #
  # Be careful to avoid repeatedly sending a PIN as that might yield the SIM
  # card to lock itself.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  if [ "$PIN" ] ; then
    qmicli -p --device="${SERIAL_DEV}" --dms-uim-verify-pin="PIN,${PIN}"
  fi
  return $?
}

register() {
  # Steps required to register the SIM with the network.
  #
  # The function must block until the SIM is registered.

  # check for raw ip mode and fix if necessary
  MODE=$( qmicli --device="${SERIAL_DEV}" --get-expected-data-format )
  if [ "${MODE}" != "raw-ip" ] ; then
    echo "fixme: switch modem to raw ip mode"
    return 1
  fi
}

connect() {
  # Steps required to connect the carrier. Please note that wwan-helper only
  # works with NDIS carrier setups (no PPP chat).
  #
  # The function must block until the carrier is connected.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.
  
  RESULT=$(qmicli -p --device="${SERIAL_DEV}" --wds-start-network="ip-type=4,apn=${APN}" --client-no-release-cid)
  ERR=$?
  if [ "$ERR" -eq 0 ] ; then 
    for FIELD in $FIELDS ; do 
     VALUE=$(echo "${RESULT}" | grep -E -o "${FIELD}: ?'[0-9]+'" | grep -E -o "[0-9]+") && echo "${VALUE}" > "${RUNDIR}/${FIELD}" || return $?
    done
    echo "modem attached to network"
  else
    echo "failed to attach to network"
    return $?
  fi

  ip link set "${IFACE}" up
  
  # some people think you shouldn't use dhcp
  # https://lists.freedesktop.org/archives/libqmi-devel/2020-April/003263.html
  # but techship says its ok
  # https://techship.com/faq/how-to-step-by-step-set-up-a-data-connection-over-qmi-interface-using-qmicli-and-in-kernel-driver-qmi-wwan-in-linux/
  udhcpc -q -f -n -i wwan0
  
  # ip addr
}

reset() {
  # If any of the above steps are unsuccessful and the user configured
  # a non-zero number of retries, this function is called. It is required to
  # take all steps necessary to reset the modem to before the "register" step,
  # i.e. including re-initialisation and unlocking of the SIM if required (it
  # can just call those functionsâ€¦)
  #
  # The function must block until the card is ready to get registered with the
  # network.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.
  :
}

disconnect() {
  # Steps required to disconnect the carrier.
  #
  # The script must block until the carrier is disconnected.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # proceed to shut down the card.
 
  # FIELDS="handle CID"

  readvars || return $?
  ip link set "${IFACE}" down || (echo "ip link down failed" ; return $?)
  qmicli -p --device="${SERIAL_DEV}" --wds-stop-network="${HANDLE}" --client-cid="${CID}"
  return $?
}

shutdown() {
  # Steps required to shut-down the the modem. This usually means turning off
  # the send-receive unit and/or putting the card into a power-safe mode.
  #
  # The script must block until the card is shut-down.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # finish and pretend the world is all in order.
  :
}

teardown() {
  # Optional steps to tear-down the handler script, e.g. removing temporary
  # files, etc.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.
  rm -rf "${RUNDIR}"
}
