#!/bin/sh
set -eu

# Copyright (C) 2016  Martin Krafft <madduck@madduck.net>
# Copyright (C) 2022  Robert B. Calhoun <rcalhoun@shotspotter.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

setup() {
  # Setup of the handler script. This is entirely optional and can be anything
  # you need to make the script work, including creating temporary files, and
  # setting up variables used by the main loop, such as $SERIAL_DEV and
  # $CHAT_TIMEOUT, in case you want to use the `modemchat` helper function.
  # You could also set these variables outside the function.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.
  SERIAL_DEV=/dev/ttyACM0
  # cdc_ncm doesn't appear as a device, CDC_DEV is invalid
  # look for dmesg ' wwan0: register 'cdc_ncm' at usb-musb-hdrc.1-1, Mobile Broadband Network Device (NO ARP), 00:00:11:12:13:14'

  # CDC_DEV=/dev/cdc-wdm0

  CHAT_TIMEOUT=10
  INIT_MAXWAIT=28 # from LE910Cx HW User Guide 1VV0301298 Rev. 34

  RUNDIR="/run/$(basename "$0")"
  verbose "RUNDIR is ${RUNDIR}"
  mkdir -p "${RUNDIR}"
}

at_cmd() {
  # run at command multiple times until OK
  cmd="${1}"
  retries="${2:-1}" 
  sleep_period="${3:-1}"
  retval=1
  for i in $(seq 1 "$retries"); do
    verbose "trying $cmd"
    output=$(printf '%s\r\n' "$cmd" | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" - | grep -e 'ERROR' -e 'OK')
    if [ "$output" = "OK" ] ; then
      verbose "$output"
      retval=0
      break
    else
      sleep "$sleep_period"
    fi
  done
  return "$retval"
}

reset_rf() {
  verbose 'PS detach'
  at_cmd 'AT+CGATT=0' 1
  verbose "Turning RF off"
  at_cmd 'AT+CFUN=4' 3 || return $?
  sleep 2
  verbose "Turning RF on"
  at_cmd 'AT+CFUN=1' 6 5 || return $?
  at_cmd 'AT+COPS=0' 3 3 || return $?
  verbose 'PS attach'
  at_cmd 'AT+CGATT=1' 1
}


reset_modem() {
  verbose "rebooting modem: "
  at_cmd 'AT#REBOOT' 3
  verbose "$?"
  sleep 5
  # hack to work around usb enumeration issue
  if [ -e  /dev/bus/usb/002/001 ] ; then cat /dev/bus/usb/002/001 > /dev/null ; fi
}

init() {

  ip link set "$IFACE" down

  if ! (lsusb -t | grep -q cdc_ncm) ; then
    verbose "cdc_ncm driver is not loaded"
    return 1
  fi

  # FIXME check for raw ip mode and fix if necessary

  INIT_MINWAIT=2
  verbose ""
  verbose "Waiting for up to $INIT_MAXWAIT seconds for modem to finish initializing"
  i=0
  sleep $INIT_MINWAIT
  at_cmd "AT" "$INIT_MAXWAIT" 1
  verbose "AT command: $?"
}

unlock() {
  # Steps required to unlock the SIM. It will only be called if a SIM PIN is
  # specified in the configuration.
  #
  # The function must block until the SIM is accessible.
  #
  # Be careful to avoid repeatedly sending a PIN as that might yield the SIM
  # card to lock itself.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.

  # FIXME ADD PIN
  verbose "unlock sim"
  if [ "$PIN" ] ; then
    verbose "fixme unlock()"
    return 1
  fi
  return $?
}

register() {
  # remove any existing CID
  rm -f "${RUNDIR}/CID"
  verbose "NCM detach"
  at_cmd 'AT#NCMD=0' 3
  verbose "PS detach"
  at_cmd 'AT+CGATT=0' 3
  verbose "set numeric error codes"
  at_cmd 'AT+CMEE=1'
  verbose 'Checking contexts'
  # need to wait until we can run CGDCONT without error
  at_cmd 'AT+CGDCONT?' 6 5 || return 1

  # Context 1 is default. ME must be able to attach on context 1 in order to connect on LTE.
  # If context 1 is "", 3GPP says operator must push the APN, at which point the ME will save
  # that APN for next time. So we accept user's APN context 1; if it's not there, then try 
  # erasing whatever is there so operator can push the correct one.
  output=$(mktemp)
  for i in 1 2 3 4 5; do
    printf 'AT+CGDCONT?\r\n' | timeout "${CHAT_TIMEOUT}" atinout - "${SERIAL_DEV}" - | grep '.' > "$output"
    # if context 1 is our apn, we're done
    grep "^+CGDCONT: 1,.*${APN}" "$output" && break
    # Context 1 isn't a useable APN or the command failed; try erasing default context. Note
    # we aren't requiring the default context to be our APN; if the modem saves it there that
    # is its own business but we only require it be set to "" per 3GPP.
    verbose "clearing default context"
    at_cmd 'AT+CGDCONT=1' 3 3 && break
    # Failed. Not sure what to do here. We've only seen this when Context=1 is appropriate and because it
    # is appropriate it is in session and can't be changed. ATZ (soft reset) is harmless but probably won't 
    # help if there is a real problem.
    at_cmd 'ATZ' 1 5
    verbose "failed to clear default context"
  done
  rm -f "$output"
  
  verbose "Finding appropriate for context for ${APN}..."
  # code very similar to above; i'm repeating myself because the business of the operator-pushed
  # APN overwriting undefined context 1 (vs leaving it undefined) is not defined in the documentation.
  # But this would benefit from a refactor.

  output=$(mktemp)
  output_clean=$(mktemp)
  CONTEXT=""
  for i in 1 2 3 4 5 ; do
    printf 'AT+CGDCONT?\r\n' | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" - | grep '.' > "$output"
    if grep -q "OK" "$output" ; then
      verbose "read contexts"
    else
      verbose "failed reading contexts, wait 10 sec"
      sleep 10
      continue
    fi
    # Command executed OK, so we can focus on the context list. 
    # From experimentation, data connection will fail if we try to use context 1, even if
    # is our own APN. So skip over context 1 and define a new context at the end.
    grep -e '^\+CGDCONT' "$output" | tail -n +2 > "$output_clean"
    if grep -q "${APN}" "$output_clean" ; then
      # found a context, get the number
      CONTEXT=$(grep "${APN}" "$output_clean" | grep -o -E '\+CGDCONT: [0-9]+' | grep -o -E '[0-9]+')
      break
    else
      # didn't find one, so get the last context and increment value
      CONTEXT=$(grep -o -E '\+CGDCONT: [0-9]+' "$output_clean" | sort |  tail -n1 | grep -o -E '[0-9]+')
      CONTEXT=$(( CONTEXT + 1 ))
    fi
    # create new or overwrite existing context with our apn. Per ATT, this should be "IP" (vs IPV4V6) if the APN is an IPV4 endpoint
    printf "AT+CGDCONT=%d,%s,%s\r\n" "$CONTEXT" "\"IP\"" "\"${APN}\"" | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" "$output"
    if [ "$IF_WWAN_LWM2M" ] && ! (grep -q "${IF_WWAN_LWM2M}" "$output_clean") ; then
      # att requires this
      CONTEXT=$(( CONTEXT + 1 ))
      verbose "adding ${IF_WWAN_LWM2M} for remote management"
      printf "AT+CGDCONT=%d,%s,%s\r\n" "${CONTEXT}" "\"IPV4V6\"" "\"${IF_WWAN_LWM2M}\"" | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" /dev/null
    fi
    sleep 1
    # wipe out CONTEXT so the only successful return is via break
    CONTEXT=""
  done
  rm -f "$output_clean"
  rm -f "$output"

  if [ -n "$CONTEXT" ] ; then
    verbose "APN ${APN} defined on context=$CONTEXT"
    echo "$CONTEXT" > "${RUNDIR}/CID"
  else
    verbose "Failed to set context"
    return 1
  fi

  verbose "Setting CEMODE to CS/PS per ATT: "
  at_cmd 'AT+CEMODE=2' 3 || return $?
  
  verbose "RF full power"
  at_cmd 'AT+CFUN=1' 3 || return $?

  verbose "Setting WS46 to LTE only"
  at_cmd 'AT+WS46=28' 3 || return $?

  verbose "Setting COPS to any operator"
  at_cmd 'AT+COPS=0' 3 || return $?

  verbose 'PS attach'
  at_cmd 'AT+CGATT=1' 1

  # Telit_2g_3g_4g_registration_process_note_r3 page 11, except we added RF reset if no network after 30 sec

  verbose "looking for tower with CEREG"
  for i in $(seq 1 40); do
    if CEREG=$(printf 'AT+CEREG?\r\n' | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" - | grep -E -e '^\+CEREG') ; then
      # e.g. "+CEREG: 0,1"
      STATUS=$(echo "$CEREG" | cut -d',' -f2)
      case "$STATUS" in
        0|3|4)
          verbose "CEREG=$STATUS, resetting RF"
          reset_rf
          sleep 5
        ;;
        1|5)
          verbose "CEREG=$STATUS, registered with tower"
          break
        ;;
        2)
          if [ "$i" -ne 20 ] ; then
            verbose "waiting for signal"
            printf 'AT+CSQ\r\n' | timeout "$CHAT_TIMEOUT" atinout - "${SERIAL_DEV}" - | grep '.'
            sleep 5
          else
            # if no tower after 30 seconds, power cycle the RF
            verbose "20 iterations without network, resetting RF front end"
            reset_rf
          fi
        ;;
        *)
        verbose "unexpected CEREG status $STATUS"
        return 1
        ;;
      esac
    else
        # didn't get a CEREG?!?!
        sleep 2
    fi
  done

  if [ "$STATUS" -eq 1 ] || [ "$STATUS" -eq 5 ] ; then
    verbose "Network CEREG=$STATUS, success"
  else
    verbose "Network CEREG=$STATUS, failure"
    return 1
  fi
  :
}

connect() {
  # Steps required to connect the carrier. Please note that wwan-helper only
  # works with NDIS carrier setups (no PPP chat).
  #
  # The function must block until the carrier is connected.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.
  verbose "running connect step"

  verbose "PDP context is $CONTEXT"

  # should already be attached
  verbose 'PS attach (redundant)'
  at_cmd 'AT+CGATT=1' 3

  # count backwards and fail if we reach 0.
  for i in 4 3 2 1 0 ; do
    # ncm mode 2 (auto-setup) and CID
    at_cmd "AT#NCM=2,${CONTEXT}" 3
    ERR=$?
    if [ "$ERR" -eq 0 ] ; then
      verbose "modem attached to ncm network"
      sleep 3
      break
    else
      if [ "$i" -gt 0 ] ; then
        verbose "modem failed to attach to network, wait 5 seconds and try again..."
        sleep 5
      else
        verbose "modem failed to attach to network, exiting with failure."
        return "$ERR"
      fi
    fi
  done
  # break continues here

  # Now get an address etc. Telit says use AT+CGPADDR=<CID> and AT+CGPADDR and AT+CGCONTRDP=<CID>
  # AT+CGPADDR=5
  # +CGPADDR: 5,"10.65.99.171"

  # OK
  # AT+CGCONTRDP=5
  # +CGCONTRDP: 5,5,"shotspotter01.com.attz.mnc170.mcc310.gprs","10.65.99.171.255.0.0.0","10.65.99.172","0.0.0.0","0.0.0.0","0.0.0.0","0.0.0.0"


  ipdata_path=$(mktemp)
  verbose "ask modem for ipdata"

  # this takes a long time
  for i in 9 8 7 6 5 4 3 2 1 0 ; do
    if printf 'AT+CGCONTRDP=%s\r\n' "$CONTEXT" | atinout - "${SERIAL_DEV}" - | grep 'CGCONTRDP:' >  "$ipdata_path" ; then
      break
    else
      if [ "$i" -gt 0 ] ; then
        verbose "waiting for ip address..."
      else
        verbose "could not get an ip"
        return 1
      fi
    fi
  done

  verbose "$(cat "$ipdata_path")"
  # not shell's finest hour. Unsafe if endpoint name contains a comma and probably 30 other reasons. Also, I'm assumign ipv4.
  ip_addr=$(cut -d',' -f4 "$ipdata_path" | tr -d '"' | awk -F'.' '{printf "%s.%s.%s.%s",$1,$2,$3,$4}')
  ip_mask=$(cut -d',' -f4 "$ipdata_path" | tr -d '"' | awk -F'.' '{printf "%s.%s.%s.%s",$5,$6,$7,$8}')
  ip_gway=$(cut -d',' -f5 "$ipdata_path" | tr -d '"')
  # not using this yet
  dns_pri=$(cut -d',' -f6 "$ipdata_path" | tr -d '"' | awk -F'.' '{printf "%s.%s.%s.%s",$1,$2,$3,$4}')
  dns_sec=$(cut -d',' -f7 "$ipdata_path" | tr -d '"' | awk -F'.' '{printf "%s.%s.%s.%s",$1,$2,$3,$4}')
  # ip_mtu="1400" # seemingly not provided by cdc ncm
  rm "$ipdata_path"

  if [ "$ip_addr" ] && [ "$ip_mask" ] && [ "$ip_gway" ] ; then
    verbose "setting up ${IFACE} as ${ip_addr}/${ip_mask} ${ip_gway}"
    verbose "DNS ${dns_pri}, ${dns_sec} ignored for now"

    # set up interface, re-flushing to avoid errors if addr already set
    ip address flush dev "${IFACE}"
    ip link set "${IFACE}" up
    # ip link set dev "${IFACE}" mtu "${ip_mtu}"
    ip address add "${ip_addr}/${ip_mask}" dev "${IFACE}"
    ip route | grep -q default && ip route delete default
    ip route add default via "${ip_gway}"
  else
    verbose "failed to get an ip address"
    return 1
  fi

  # Prefer user-provided dns servers if defined
  NAMESERVERS="${IF_DNS_NAMESERVERS} ${dns_pri} ${dns_sec}"

  if [ "$NAMESERVERS" ] ; then
    # often /etc/resolv.conf -> /tmp/resolv.conf on embedded
    RESOLV_PATH=$(realpath /etc/resolv.conf)
    TMP_PATH=$(mktemp)
    echo "# created by $0" > "$TMP_PATH"
    for NAMESERVER in $NAMESERVERS; do
      [ "$NAMESERVER" != "0.0.0.0" ] && echo "nameserver ${NAMESERVER}" >> "$TMP_PATH"
    done
    cp "$RESOLV_PATH" "$RUNDIR"
    chmod 644 "$TMP_PATH"
    mv "$TMP_PATH" "$RESOLV_PATH"
  fi
  return $?
}

reset() {
  # If any of the above steps are unsuccessful and the user configured
  # a non-zero number of retries, this function is called. It is required to
  # take all steps necessary to reset the modem to before the "register" step,
  # i.e. including re-initialisation and unlocking of the SIM if required (it
  # can just call those functions…)
  
  # power cycle, that's kind of aggressive
  vebose "skipping power-cycle of modem but we could do that"
  # reset_modem
  init
  # The function must block until the card is ready to get registered with the
  # network.
  #
  # Failure is fatal and will cause wwan-helper to retry, unless the user
  # didn't configure retires, in which case it will cause wwan-helper to exit
  # with an error.
  :
}

disconnect() {
  # Steps required to disconnect the carrier.
  #
  # The script must block until the carrier is disconnected.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # proceed to shut down the card.
 
  # restore DNS
  TMP_PATH="${RUNDIR}/resolv.conf"
  if [ -e "${TMP_PATH}" ] ; then
    RESOLV_PATH=$(realpath /etc/resolv.conf)
    chmod 644 "$TMP_PATH"
    mv "$TMP_PATH" "$RESOLV_PATH"
  fi

  # bring down interface
  ip route delete default dev "${IFACE}"
  ip address flush dev "${IFACE}"
  ip link set "${IFACE}" down

  # shut down modem
  verbose "shutting down cdc-ncm connection"
  at_cmd 'AT#NCMD=0' 3

  # detach from ps network
  verbose "PS detach"
  at_cmd 'AT+CGATT=0' 3
  rm -f "r${RUNDIR}/CID"
  return $?
}

shutdown() {
  # Steps required to shut-down the the modem. This usually means turning off
  # the send-receive unit and/or putting the card into a power-safe mode.
  #
  # The script must block until the card is shut-down.
  #
  # Failure is *not* fatal and in case of an error, wwan-helper will just
  # finish and pretend the world is all in order.
  :
}

teardown() {
  # Optional steps to tear-down the handler script, e.g. removing temporary
  # files, etc.
  #
  # Failure is fatal and will cause wwan-helper to exit with an error.
  :
}
